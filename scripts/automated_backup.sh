#!/bin/bash

# Script de backup automatizado - executa sem interven√ß√£o do usu√°rio
# Autor: Igor - Jarvis Ecosystem  
# Execu√ß√£o: Autom√°tica via cron (todo dia √†s 2h)

set -e

# Configura√ß√µes autom√°ticas
export CONTAINER_NAME="vision_database"
export DB_NAME="jarvis_vision"
export DB_USER="postgres"
export BACKUP_DIR="/app/backups/$(date +%Y%m%d)"
export LOG_DIR="/app/logs"
export MAX_BACKUPS=30

# Cores para logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o de log com timestamp
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_DIR/backup_auto.log"
}

log "${GREEN}ü§ñ BACKUP AUTOM√ÅTICO INICIADO${NC}"
log "${BLUE}üìÖ Data/Hora: $(date)${NC}"

# Criar diret√≥rios necess√°rios
mkdir -p "$BACKUP_DIR" "$LOG_DIR"

# Verificar se o container est√° rodando
if ! docker ps --format "table {{.Names}}" | grep -q "$CONTAINER_NAME"; then
    log "${RED}‚ùå ERRO: Container $CONTAINER_NAME n√£o est√° rodando!${NC}"
    exit 1
fi

log "${GREEN}‚úÖ Container verificado e funcionando${NC}"

# Backup incremental inteligente
BACKUP_FILE="jarvis_auto_backup_$(date +%Y%m%d_%H%M%S)"

log "${YELLOW}üì¶ Iniciando backup completo...${NC}"

# Backup completo com compress√£o
if docker exec "$CONTAINER_NAME" pg_dump -U "$DB_USER" -d "$DB_NAME" --clean --if-exists | gzip > "$BACKUP_DIR/${BACKUP_FILE}.sql.gz"; then
    log "${GREEN}‚úÖ Backup completo criado com sucesso${NC}"
else
    log "${RED}‚ùå ERRO: Falha no backup completo${NC}"
    exit 1
fi

# Backup apenas dos dados (para recupera√ß√£o r√°pida)
log "${YELLOW}üìä Criando backup de dados...${NC}"
if docker exec "$CONTAINER_NAME" pg_dump -U "$DB_USER" -d "$DB_NAME" --data-only | gzip > "$BACKUP_DIR/${BACKUP_FILE}_data.sql.gz"; then
    log "${GREEN}‚úÖ Backup de dados criado${NC}"
else
    log "${YELLOW}‚ö†Ô∏è Aviso: Backup de dados falhou (n√£o cr√≠tico)${NC}"
fi

# Verificar integridade do backup
log "${YELLOW}üîç Verificando integridade do backup...${NC}"
if gunzip -t "$BACKUP_DIR/${BACKUP_FILE}.sql.gz"; then
    log "${GREEN}‚úÖ Integridade do backup verificada${NC}"
else
    log "${RED}‚ùå ERRO: Backup corrompido!${NC}"
    exit 1
fi

# Calcular tamanho do backup
BACKUP_SIZE=$(du -h "$BACKUP_DIR/${BACKUP_FILE}.sql.gz" | cut -f1)
log "${BLUE}üìä Tamanho do backup: $BACKUP_SIZE${NC}"

# Limpeza autom√°tica de backups antigos
log "${YELLOW}üßπ Limpando backups antigos (>${MAX_BACKUPS} dias)...${NC}"
find /app/backups -type d -name "20*" -mtime +$MAX_BACKUPS -exec rm -rf {} \; 2>/dev/null || true

# Estat√≠sticas finais
TOTAL_BACKUPS=$(find /app/backups -name "*.sql.gz" | wc -l)
TOTAL_SIZE=$(du -sh /app/backups | cut -f1)

log "${GREEN}üéâ BACKUP AUTOM√ÅTICO CONCLU√çDO COM SUCESSO!${NC}"
log "${BLUE}üìà Estat√≠sticas:${NC}"
log "${BLUE}   ‚Ä¢ Total de backups: $TOTAL_BACKUPS${NC}"
log "${BLUE}   ‚Ä¢ Espa√ßo total usado: $TOTAL_SIZE${NC}"
log "${BLUE}   ‚Ä¢ √öltimo backup: $BACKUP_DIR/${BACKUP_FILE}.sql.gz${NC}"

# Notifica√ß√£o opcional (webhook, email, etc.)
# Aqui voc√™ pode adicionar notifica√ß√µes para sistemas externos
log "${GREEN}‚úÖ Sistema de backup funcionando perfeitamente!${NC}"

exit 0
